#! /bin/bash
#
# bootstrap
#
# Bootstrap file to use when setting up user account.
# This script is meant to be idempotent.
#



#====================================================================
# Script Setup

echo
echo 'Running user account bootstrap process...'

TDIR="$HOME/code/dotlib/templates"
OSNAME="$(uname -s)"

# not actually necessary as everything refers to absolute paths
cd "$HOME" || { echo 'ERROR Cannot cd into ~'; exit 1; }




#====================================================================
# Create Directory Structure

# code/
mkdir -p "$HOME/code/_scratch"
mkdir -p "$HOME/code/bin"
mkdir -p "$HOME/code/github"
mkdir -p "$HOME/code/remoteless"

# add in directory use explanations
if [[ ! -f "$HOME/code/remoteless/_README.md" ]]; then
  echo "# remoteless 

Version control repos without remotes.
  
This file autogenerated by bootstrap script. 
" > "$HOME/code/remoteless/_README.md"
fi



#====================================================================
# Copy Templates

## dotenv_local (~/.dotenv_local)
if [[ -f "$HOME/dotenv_local" ]]; then
  echo "WARNING: '$HOME/dotenv_local' already exists. Skipping."

else
  cp "$TDIR/dotenv_local" "$HOME/.dotenv_local"
  chmod 600 "$HOME/.dotenv_local"
fi


## git user (~/.config/git/user)
if [[ -f "$HOME/.config/git/user" ]]; then
  echo "WARNING: '$HOME/.config/git/user' already exists. Skipping."

else
  echo "Please enter email address for use with git:"
  read -r GIT_EMAIL
  sed "s/email@example.com/$GIT_EMAIL/g" "$TDIR/git_user" > "$HOME/.config/git/user"
fi


## .ssh/config ($HOME/.ssh)
# note ssh doesn't allow this file to be symlinked
# TODO: switch to yadm's templates
if [[ -f ~/.ssh/config ]]; then
  echo "WARNING: '$HOME/.ssh/config' already exists. Skipping."

else
  if [[ $OSNAME == "Darwin" ]]; then
    # macOS
    grep -v '# linux only' "$TDIR/ssh_config" > ~/.ssh/config

  else
    # linux
    grep -v '# macOS only' "$TDIR/ssh_config" > ~/.ssh/config
  fi

  chown "$USER:$USER" ~/.ssh/config
  chmod 600 ~/.ssh/config
fi



#====================================================================
# Initialize Executables 

# Note: zsh plugin manager (zinit) will bootstrap itself when zsh is used
# Note: tmux plugin manager (tpm) will bootstrap itself tmux is used

# vim Plug plugin manager
if [[ -x "$(command -v vim)" ]]; then
  vim '+PlugUpdate' '+PlugClean!' '+qall'
else
  if [[ -x "$(command -v nvim)" ]]; then
    nvim '+PlugUpdate' '+PlugClean!' '+qall'
  else 
    echo "Vim and NeoVim were not found. Skipping Vim plugin initialization."
  fi
fi



#====================================================================
# Final Instructions

echo "
Final Steps:
- Run 'zinit self-update' in new shell
- Run fzf installation
  - homebrew: $(brew --prefix)/opt/fzf/install
  - git clone: ~/.fzf/install
- Run code/dotbin/ssh-keygen-25519 to create ssh keys (seperate for ssh and git).

Bootstrap complete! Please restart all shells."
